import org.apache.spark._
import org.apache.spark.graphx._
import org.apache.spark.rdd.RDD

import org.apache.spark.graphx.GraphLoader
import org.apache.spark.graphx.GraphOps

//Edge RDD

val friends = sc.textFile("friends.txt").map{ line => 
val fields = line.split(",")
Edge(fields(0).toLong, fields(1).toLong, fields(2).toLong)
}

friends.take(10)

//Vertex ID Name Operation

case class User(name: String, occupation: String)

val users = sc.textFile("users.txt").map{ line =>
 val fields = line.split(",")
 (fields(0).toLong, User(fields(1), fields(2)))
 }

users.take(10)

//Now to build a graph

val graph = Graph(users, friends)

graph.vertices

graph.edges

graph.vertices.collect

graph.edges.collect

		
//shortest paths continued

val srcId = 1 

val initGraph = graph.mapVertices((id, x) => if(id == srcId) 0.0
else Double.PositiveInfinity)

val weightedShortestPath = initGraph.pregel(Double.PositiveInfinity,5)(
 (id, dist, newDist) => math.min(dist, newDist),
 triplet => {
 if (triplet.srcAttr + triplet.attr < triplet.dstAttr) {
 Iterator((triplet.dstId, triplet.srcAttr + triplet.attr))
 }
 else {
 Iterator.empty
 }
 },
 (a, b) => math.min(a, b)
 )

weightedShortestPath.vertices.take(10).mkString("\n")