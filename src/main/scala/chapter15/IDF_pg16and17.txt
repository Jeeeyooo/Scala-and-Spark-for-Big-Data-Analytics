// IDF를 임포트한다
import org.apache.spark.ml.feature.IDF

// HashingTF을 임포트한다
import org.apache.spark.ml.feature.HashingTF

// StopWordsRemover을 임포트한다
import org.apache.spark.ml.feature.StopWordsRemover

// Tokenizer를 임포트한다
import org.apache.spark.ml.feature.Tokenizer

// 데이터 프레임을 생성한다
val lines = Seq(
 (1, "Hello there, how do you like the book so far?"),
 (2, "I am new to Machine Learning"),
 (3, "Maybe i should get some coffee before starting"),
 (4, "Coffee is best when you drink it hot"),
 (5, "Book stores have coffee too so i should go to a book store")
 )

val sentenceDF = spark.createDataFrame(lines).toDF("id", "sentence")


// Tokenizer를 초기화한다
val tokenizer = new Tokenizer().setInputCol("sentence").setOutputCol("words")

// transform를 호출한다
val wordsDF = tokenizer.transform(sentenceDF)

// 컬럼 id, sentence, words 컬럼으로 구성된 데이터 프레임을 출력한다
wordsDF.show(false)

// StopWordsRemoval를 초기화한다
val remover = new StopWordsRemover().setInputCol("words").setOutputCol("filteredWords")

// transform 함수를 초기화한다
val noStopWordsDF = remover.transform(wordsDF)

// 데이터 프레임을 출력한다
noStopWordsDF.show(false)

// sentence와 필터링된 단어(filteredWords)만 보여주는 데이터 프레임을 출력한다
noStopWordsDF.select("sentence", "filteredWords").show(5,false)


val hashingTF = new HashingTF().setInputCol("filteredWords").setOutputCol("rawFeatures").setNumFeatures(100)


// transform 함수를 호출한다
val rawFeaturesDF = hashingTF.transform(noStopWordsDF)

// 데이터 프레임을 출력한다
rawFeaturesDF.show(false)

// IDF를 초기화한다
val idf = new IDF().setInputCol("rawFeatures").setOutputCol("features")

// fit 함수를 적용한다
val idfModel = idf.fit(rawFeaturesDF)

// transform 함수를  호출한다
val featuresDF = idfModel.transform(rawFeaturesDF)

// id와 features 컬럼으로 구성된 데이터 프레임을 출력한다.
featuresDF.select("id", "features").show(5, false)

// 전체 데이터 프레임을 출력한다
featuresDF.show(false)
